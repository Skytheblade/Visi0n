@page "/page/{value}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using SRv1;

<PageTitle>Counter</PageTitle>

<h1>Login Page</h1>


<input @bind-value="_name" />
<input @bind-value="_text" />
<p>Checked: @_inputfull</p>
<button class="btn btn-primary" @onclick="LogAtt">Click me</button>


<p role="status">Login: @result</p>


@code {

    [Parameter]
    public string value { get; set; }

    private int currentCount = 0;
    string _name = "Username";
    string _text = "Password";
    string _inputfull = "";

    bool Submit;
    string result = "";

    private async void LogAtt()
    {
        currentCount++;
        result = "trying";
        _inputfull = _name + " " + _text;
        Submit = await Call(_name, _text, int.Parse(value));
        if (Submit) 
        { 
            result = "logged"; 
        } 
        else 
        { 
            result = "failed"; 
        }
        StateHasChanged();
        await Task.Delay(300);
        VisionServiceClient client = new VisionServiceClient(VisionServiceClient.EndpointConfiguration.BasicHttpBinding_IVisionService, "http://localhost:5000/VisionService/basichttp");
        int idd = await client.GetIDAsync(_name);
        if (Submit)
        {
            if (int.Parse(value) == 1)
            {
                Navigate("self/" + idd);
            }
            else if (int.Parse(value) == 2)
                Navigate("corp/" + idd);
        }
    }

    public async Task<bool> Call(string un, string pw, int tp)
    {
        var client = new VisionServiceClient(VisionServiceClient.EndpointConfiguration.BasicHttpBinding_IVisionService, "http://localhost:5000/VisionService/basichttp");
        bool fl = await client.LoginAsync(un, pw, tp);
        if (fl) return true;
        else return false;
    }

    void Reload() { } // just run a command on main to load unloaded data (for async functions), or use StateHasChanged

    void Navigate(string name)
    {
        Navigation.NavigateTo("/" + name);
    }
}

