@page "/page"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using SRv1;

<PageTitle>Counter</PageTitle>

<h1>Login Page</h1>


<input @bind-value="_name" />
<input @bind-value="_text" />
<p>Checked: @_inputfull</p>
<button class="btn btn-primary" @onclick="LogAtt">Click me</button>


<p role="status">Login: @result</p>

<!--input @bind-value="result" />
<button class="btn btn-primary" @onclick="Reload">Active Reload</button>
<p> </p>
<button-- class="btn btn-primary" @onclick="Navigate">Redirect</button-->

@code {
    private int currentCount = 0;
    string _name = "Hi";
    string _text = "Guten Morgen";
    string _inputfull = "";

    bool Submit;
    string result = "";

    private async void LogAtt()
    {
        currentCount++;
        result = "trying";
        //if (_name == "hello") { _name = "heyy"; _text = "click clak"; }
        //else { _name = "hello"; _text = "you have clocked" + currentCount + " times"; }
        _inputfull = _name + " " + _text;
        Submit = await Call(_name, _text);
        if (Submit) 
        { 
            result = "logged"; 
        } 
        else 
        { 
            result = "failed"; 
        }
        StateHasChanged();
    }

    public async Task<bool> Call(string un, string pw)
    {
        var client = new VisionServiceClient(VisionServiceClient.EndpointConfiguration.BasicHttpBinding_IVisionService, "http://localhost:5000/VisionService/basichttp");
        bool fl = await client.LoginAsync(un, pw, 1);
        if (fl) return true;
        else return false;
    }

    void Reload() { } // just run a command on main to load unloaded data (for async functions), or use StateHasChanged

    void Navigate()
    {
        Navigation.NavigateTo("/counter");
    }
}

